import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class Portfolio {

	private double cashBalance;
	
	private Map<Stock, Integer> holdings;  // {AAPL: 5 shares}
	
	public Portfolio(double initialCash) {
		cashBalance = initialCash;
		holdings = new HashMap<>();
	}
	
	public Map<Stock, Integer> getHoldings() {
		return holdings;
	}
	
	public ArrayList<Stock> getOwnedStocks() {
		ArrayList<Stock> stocks = new ArrayList<>();
		for (Stock s: holdings.keySet()) {
			stocks.add(s);
		}
		return stocks;
	}

	public boolean buyStock (Stock stock, int quant) {
		int price = (int) (quant * stock.getPrice());
		if (price > cashBalance) {
			System.out.println("Insufficient funds");
			return false;
		}
		else {
			cashBalance -= price;
			int currentShares = holdings.getOrDefault(stock, 0);
			holdings.put(stock, currentShares + quant);
		}
		return true;
	}
	
	public boolean sellStock (Stock stock, int quant) {
		if (!holdings.containsKey(stock) || holdings.get(stock) < quant) {
			System.out.println("You don't own that number of shares");
			return false;
		}
		
		cashBalance += (int) (quant * stock.getPrice());
		int remaining = holdings.get(stock) - quant;
		if (remaining == 0) {
			holdings.remove(stock);
		}
		else {
			holdings.put(stock, remaining);
		}
		return true;
	}
	
	public double getTotalValue() {  // output cash+value of stocks
		double totalCash = getCashBalance();
		for (Stock s: holdings.keySet()) {
			double price = s.getPrice();
			totalCash += holdings.get(s) * price;			
		}
		BigDecimal bd = new BigDecimal(Double.toString(totalCash));
		bd = bd.setScale(2, RoundingMode.HALF_UP);
		totalCash = bd.doubleValue();
		return totalCash;
	}
	
	public double getPortfolioValue() {
		double value = getTotalValue() - getCashBalance();
		BigDecimal bd = new BigDecimal(Double.toString(value));
		bd = bd.setScale(2, RoundingMode.HALF_UP);
		value = bd.doubleValue();
		return value;
	}

	public double getCashBalance() {
		BigDecimal bd = new BigDecimal(Double.toString(cashBalance));
		bd = bd.setScale(2, RoundingMode.HALF_UP);
		cashBalance = bd.doubleValue();
		return cashBalance;
	}
	
	public void printSummary() {
		for (Stock shares: holdings.keySet()) {
			System.out.println(shares.getName() + ": " + holdings.get(shares));
		}
		System.out.println();
		System.out.println("Number of shares: " + holdings.size());
		System.out.println("Value of shares: " + (getTotalValue()-cashBalance));
		System.out.println("Total Value: " + getTotalValue());
		System.out.println("Cash Balance: " + cashBalance);

	}

}
